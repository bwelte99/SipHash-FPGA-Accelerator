#ifndef vectors_511B
#define vectors_511B

/*
 * vectors_511B - header file w/Siphash vectors for 511-byte input
 */

//array with one entry for each half of the security key
const static uint64_t keys[] = {
	0x15E0EB7F268D666B,
	0x286714C57279A9F3
};

//array w/8-byte hardware test vectors
const static uint64_t test_vectors[] = {
	0x32BC977C034F197B,
	0x0B7B6AAB14E903A7,
	0x0E82EBEF1A1E741E,
	0x0F49FB376AE3C4A8,
	0x5981EF0E588D0F62,
	0x578F9CE85984A368,
	0x1970C3261DAC7EF8,
	0x232FC1FF41846452,
	0x774144590AF359B3,
	0x7CEDB35000DEA5D0,
	0x7DEC0F67648C8193,
	0x5D8AC9982E265A32,
	0x7807AEFA5C4F7B29,
	0x02DCE19555466A2E,
	0x47C014210DE89A79,
	0x1137B3F52B43F65A,
	0x402CFA017A7CAB9D,
	0x149B1FBC1CB31EA0,
	0x0796E3484EAFE5F0,
	0x273CF55223E51AF3,
	0x7D69BE5B6118D257,
	0x7EC5514F7ECC923B,
	0x4050F68D16DA8181,
	0x21CDDB3521F5134E,
	0x22D3B91F37923AE7,
	0x1C1EBC7A1EBB8E85,
	0x4CE1E8B720BFC886,
	0x7D0F43AF79A98612,
	0x4EEFF04044E997B1,
	0x52D2322B7FEC2544,
	0x2B301B9E16B00462,
	0x112CAFFF6409E620,
	0x00BD04C06B5D159F,
	0x3A0CFB8F25C7CFBB,
	0x49ACEAAF0853E808,
	0x696CBA5F6149F0E2,
	0x6016831D4716A90A,
	0x5DF12A8C68320BAF,
	0x0A271EFD206779AA,
	0x57F9B4917FBF05C1,
	0x1E7A94462CFAD81C,
	0x4DBAA0A27418710B,
	0x6DC1F71D6B5C7CFD,
	0x304614AF4AC9E452,
	0x4AB609963CB1E75E,
	0x5361EBC0031846DA,
	0x67222CFA75E62535,
	0x61433AD4648E9BBF,
	0x0A566B7B67DF31BA,
	0x703319C21B503664,
	0x7C9A27465403562A,
	0x1B19FF34599FD422,
	0x41D1DFD15CB0AA63,
	0x7D18240D790B29C0,
	0x78CA2F814BF8FECE,
	0x78F3D6EB5511D89F,
	0x492A49AA1744C3C7,
	0x02A140C546AE778D,
	0x11785BDF36EC40C8,
	0x739E282632E75574,
	0x35FF9C4E5C2E6576,
	0x52148AAB470013E6,
	0x2B8EAFA51D21C948,
	0xFF00FB023357C57F
};

//Correct hash value:
const static uint64_t test_hash = 0x3F24A9C12E17BB60;

//size of input in bytes:
const static int test_vector_size_bytes = (int)sizeof(test_vectors) - 1;


#endif